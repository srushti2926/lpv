%%writefile cuda_fixed.cu
#include <stdio.h>
#include <stdlib.h>
#include <cuda_runtime.h>

#define N 4
#define MATRIX_SIZE 4

__global__ void add(int* A, int* B, int* C, int size) {
    int tid = blockIdx.x * blockDim.x + threadIdx.x;
    if (tid < size) {
        C[tid] = A[tid] + B[tid];
    }
}

__global__ void multiply(int* A, int* B, int* C, int size) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    int sum = 0;
    if (row < size && col < size) {
        for (int i = 0; i < size; ++i) {
            sum += A[row * size + i] * B[i * size + col];
        }
        C[row * size + col] = sum;
    }
}

void printVector(const char* name, int* vec, int size) {
    printf("%s: ", name);
    for (int i = 0; i < size; ++i) {
        printf("%d ", vec[i]);
    }
    printf("\n");
}

void printMatrix(const char* name, int* mat, int size) {
    printf("%s:\n", name);
    for (int i = 0; i < size; ++i) {
        for (int j = 0; j < size; ++j) {
            printf("%d ", mat[i * size + j]);
        }
        printf("\n");
    }
}

int main() {
    int A[N], B[N], C[N];
    for (int i = 0; i < N; ++i) {
        A[i] = rand() % 10;
        B[i] = rand() % 10;
    }

    int *d_A, *d_B, *d_C;
    cudaMalloc(&d_A, N * sizeof(int));
    cudaMalloc(&d_B, N * sizeof(int));
    cudaMalloc(&d_C, N * sizeof(int));

    cudaMemcpy(d_A, A, N * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, B, N * sizeof(int), cudaMemcpyHostToDevice);

    add<<<1, N>>>(d_A, d_B, d_C, N);
    cudaDeviceSynchronize();

    cudaError_t err = cudaGetLastError();
    if (err != cudaSuccess) printf("Add Kernel Error: %s\n", cudaGetErrorString(err));

    cudaMemcpy(C, d_C, N * sizeof(int), cudaMemcpyDeviceToHost);

    printVector("Vector A", A, N);
    printVector("Vector B", B, N);
    printVector("Addition", C, N);

    cudaFree(d_A); cudaFree(d_B); cudaFree(d_C);

    int size = MATRIX_SIZE;
    int elements = size * size;
    int D[elements], E[elements], F[elements];
    for (int i = 0; i < elements; ++i) {
        D[i] = rand() % 10;
        E[i] = rand() % 10;
    }

    int *d_D, *d_E, *d_F;
    cudaMalloc(&d_D, elements * sizeof(int));
    cudaMalloc(&d_E, elements * sizeof(int));
    cudaMalloc(&d_F, elements * sizeof(int));

    cudaMemcpy(d_D, D, elements * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_E, E, elements * sizeof(int), cudaMemcpyHostToDevice);

    dim3 threadsPerBlock(2, 2);
    dim3 blocksPerGrid((size + 1)/2, (size + 1)/2);

    multiply<<<blocksPerGrid, threadsPerBlock>>>(d_D, d_E, d_F, size);

    cudaDeviceSynchronize();

    err = cudaGetLastError();
    if (err != cudaSuccess) printf("Multiply Kernel Error: %s\n", cudaGetErrorString(err));

    cudaMemcpy(F, d_F, elements * sizeof(int), cudaMemcpyDeviceToHost);

    printMatrix("Matrix D", D, size);
    printMatrix("Matrix E", E, size);
    printMatrix("Multiplication", F, size);

    cudaFree(d_D); cudaFree(d_E); cudaFree(d_F);

    return 0;
}